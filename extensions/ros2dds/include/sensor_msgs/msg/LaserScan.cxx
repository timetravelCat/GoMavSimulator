// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LaserScan.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "LaserScan.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define builtin_interfaces_msg_Time_max_cdr_typesize 8ULL;
#define std_msgs_msg_Header_max_cdr_typesize 268ULL;
#define sensor_msgs_msg_LaserScan_max_cdr_typesize 1104ULL;
#define builtin_interfaces_msg_Time_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_Header_max_key_cdr_typesize 0ULL;
#define sensor_msgs_msg_LaserScan_max_key_cdr_typesize 0ULL;

sensor_msgs::msg::LaserScan::LaserScan()
{
    // std_msgs::msg::Header m_header

    // float m_angle_min
    m_angle_min = 0.0;
    // float m_angle_max
    m_angle_max = 0.0;
    // float m_angle_increment
    m_angle_increment = 0.0;
    // float m_time_increment
    m_time_increment = 0.0;
    // float m_scan_time
    m_scan_time = 0.0;
    // float m_range_min
    m_range_min = 0.0;
    // float m_range_max
    m_range_max = 0.0;
    // sequence<float> m_ranges

    // sequence<float> m_intensities


}

sensor_msgs::msg::LaserScan::~LaserScan()
{










}

sensor_msgs::msg::LaserScan::LaserScan(
        const LaserScan& x)
{
    m_header = x.m_header;
    m_angle_min = x.m_angle_min;
    m_angle_max = x.m_angle_max;
    m_angle_increment = x.m_angle_increment;
    m_time_increment = x.m_time_increment;
    m_scan_time = x.m_scan_time;
    m_range_min = x.m_range_min;
    m_range_max = x.m_range_max;
    m_ranges = x.m_ranges;
    m_intensities = x.m_intensities;
}

sensor_msgs::msg::LaserScan::LaserScan(
        LaserScan&& x) noexcept 
{
    m_header = std::move(x.m_header);
    m_angle_min = x.m_angle_min;
    m_angle_max = x.m_angle_max;
    m_angle_increment = x.m_angle_increment;
    m_time_increment = x.m_time_increment;
    m_scan_time = x.m_scan_time;
    m_range_min = x.m_range_min;
    m_range_max = x.m_range_max;
    m_ranges = std::move(x.m_ranges);
    m_intensities = std::move(x.m_intensities);
}

sensor_msgs::msg::LaserScan& sensor_msgs::msg::LaserScan::operator =(
        const LaserScan& x)
{

    m_header = x.m_header;
    m_angle_min = x.m_angle_min;
    m_angle_max = x.m_angle_max;
    m_angle_increment = x.m_angle_increment;
    m_time_increment = x.m_time_increment;
    m_scan_time = x.m_scan_time;
    m_range_min = x.m_range_min;
    m_range_max = x.m_range_max;
    m_ranges = x.m_ranges;
    m_intensities = x.m_intensities;

    return *this;
}

sensor_msgs::msg::LaserScan& sensor_msgs::msg::LaserScan::operator =(
        LaserScan&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_angle_min = x.m_angle_min;
    m_angle_max = x.m_angle_max;
    m_angle_increment = x.m_angle_increment;
    m_time_increment = x.m_time_increment;
    m_scan_time = x.m_scan_time;
    m_range_min = x.m_range_min;
    m_range_max = x.m_range_max;
    m_ranges = std::move(x.m_ranges);
    m_intensities = std::move(x.m_intensities);

    return *this;
}

bool sensor_msgs::msg::LaserScan::operator ==(
        const LaserScan& x) const
{

    return (m_header == x.m_header && m_angle_min == x.m_angle_min && m_angle_max == x.m_angle_max && m_angle_increment == x.m_angle_increment && m_time_increment == x.m_time_increment && m_scan_time == x.m_scan_time && m_range_min == x.m_range_min && m_range_max == x.m_range_max && m_ranges == x.m_ranges && m_intensities == x.m_intensities);
}

bool sensor_msgs::msg::LaserScan::operator !=(
        const LaserScan& x) const
{
    return !(*this == x);
}

size_t sensor_msgs::msg::LaserScan::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return sensor_msgs_msg_LaserScan_max_cdr_typesize;
}

size_t sensor_msgs::msg::LaserScan::getCdrSerializedSize(
        const sensor_msgs::msg::LaserScan& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.ranges().size() > 0)
    {
        current_alignment += (data.ranges().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.intensities().size() > 0)
    {
        current_alignment += (data.intensities().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }




    return current_alignment - initial_alignment;
}

void sensor_msgs::msg::LaserScan::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_angle_min;
    scdr << m_angle_max;
    scdr << m_angle_increment;
    scdr << m_time_increment;
    scdr << m_scan_time;
    scdr << m_range_min;
    scdr << m_range_max;
    scdr << m_ranges;
    scdr << m_intensities;

}

void sensor_msgs::msg::LaserScan::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_angle_min;
    dcdr >> m_angle_max;
    dcdr >> m_angle_increment;
    dcdr >> m_time_increment;
    dcdr >> m_scan_time;
    dcdr >> m_range_min;
    dcdr >> m_range_max;
    dcdr >> m_ranges;
    dcdr >> m_intensities;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void sensor_msgs::msg::LaserScan::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void sensor_msgs::msg::LaserScan::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& sensor_msgs::msg::LaserScan::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& sensor_msgs::msg::LaserScan::header()
{
    return m_header;
}
/*!
 * @brief This function sets a value in member angle_min
 * @param _angle_min New value for member angle_min
 */
void sensor_msgs::msg::LaserScan::angle_min(
        float _angle_min)
{
    m_angle_min = _angle_min;
}

/*!
 * @brief This function returns the value of member angle_min
 * @return Value of member angle_min
 */
float sensor_msgs::msg::LaserScan::angle_min() const
{
    return m_angle_min;
}

/*!
 * @brief This function returns a reference to member angle_min
 * @return Reference to member angle_min
 */
float& sensor_msgs::msg::LaserScan::angle_min()
{
    return m_angle_min;
}

/*!
 * @brief This function sets a value in member angle_max
 * @param _angle_max New value for member angle_max
 */
void sensor_msgs::msg::LaserScan::angle_max(
        float _angle_max)
{
    m_angle_max = _angle_max;
}

/*!
 * @brief This function returns the value of member angle_max
 * @return Value of member angle_max
 */
float sensor_msgs::msg::LaserScan::angle_max() const
{
    return m_angle_max;
}

/*!
 * @brief This function returns a reference to member angle_max
 * @return Reference to member angle_max
 */
float& sensor_msgs::msg::LaserScan::angle_max()
{
    return m_angle_max;
}

/*!
 * @brief This function sets a value in member angle_increment
 * @param _angle_increment New value for member angle_increment
 */
void sensor_msgs::msg::LaserScan::angle_increment(
        float _angle_increment)
{
    m_angle_increment = _angle_increment;
}

/*!
 * @brief This function returns the value of member angle_increment
 * @return Value of member angle_increment
 */
float sensor_msgs::msg::LaserScan::angle_increment() const
{
    return m_angle_increment;
}

/*!
 * @brief This function returns a reference to member angle_increment
 * @return Reference to member angle_increment
 */
float& sensor_msgs::msg::LaserScan::angle_increment()
{
    return m_angle_increment;
}

/*!
 * @brief This function sets a value in member time_increment
 * @param _time_increment New value for member time_increment
 */
void sensor_msgs::msg::LaserScan::time_increment(
        float _time_increment)
{
    m_time_increment = _time_increment;
}

/*!
 * @brief This function returns the value of member time_increment
 * @return Value of member time_increment
 */
float sensor_msgs::msg::LaserScan::time_increment() const
{
    return m_time_increment;
}

/*!
 * @brief This function returns a reference to member time_increment
 * @return Reference to member time_increment
 */
float& sensor_msgs::msg::LaserScan::time_increment()
{
    return m_time_increment;
}

/*!
 * @brief This function sets a value in member scan_time
 * @param _scan_time New value for member scan_time
 */
void sensor_msgs::msg::LaserScan::scan_time(
        float _scan_time)
{
    m_scan_time = _scan_time;
}

/*!
 * @brief This function returns the value of member scan_time
 * @return Value of member scan_time
 */
float sensor_msgs::msg::LaserScan::scan_time() const
{
    return m_scan_time;
}

/*!
 * @brief This function returns a reference to member scan_time
 * @return Reference to member scan_time
 */
float& sensor_msgs::msg::LaserScan::scan_time()
{
    return m_scan_time;
}

/*!
 * @brief This function sets a value in member range_min
 * @param _range_min New value for member range_min
 */
void sensor_msgs::msg::LaserScan::range_min(
        float _range_min)
{
    m_range_min = _range_min;
}

/*!
 * @brief This function returns the value of member range_min
 * @return Value of member range_min
 */
float sensor_msgs::msg::LaserScan::range_min() const
{
    return m_range_min;
}

/*!
 * @brief This function returns a reference to member range_min
 * @return Reference to member range_min
 */
float& sensor_msgs::msg::LaserScan::range_min()
{
    return m_range_min;
}

/*!
 * @brief This function sets a value in member range_max
 * @param _range_max New value for member range_max
 */
void sensor_msgs::msg::LaserScan::range_max(
        float _range_max)
{
    m_range_max = _range_max;
}

/*!
 * @brief This function returns the value of member range_max
 * @return Value of member range_max
 */
float sensor_msgs::msg::LaserScan::range_max() const
{
    return m_range_max;
}

/*!
 * @brief This function returns a reference to member range_max
 * @return Reference to member range_max
 */
float& sensor_msgs::msg::LaserScan::range_max()
{
    return m_range_max;
}

/*!
 * @brief This function copies the value in member ranges
 * @param _ranges New value to be copied in member ranges
 */
void sensor_msgs::msg::LaserScan::ranges(
        const std::vector<float>& _ranges)
{
    m_ranges = _ranges;
}

/*!
 * @brief This function moves the value in member ranges
 * @param _ranges New value to be moved in member ranges
 */
void sensor_msgs::msg::LaserScan::ranges(
        std::vector<float>&& _ranges)
{
    m_ranges = std::move(_ranges);
}

/*!
 * @brief This function returns a constant reference to member ranges
 * @return Constant reference to member ranges
 */
const std::vector<float>& sensor_msgs::msg::LaserScan::ranges() const
{
    return m_ranges;
}

/*!
 * @brief This function returns a reference to member ranges
 * @return Reference to member ranges
 */
std::vector<float>& sensor_msgs::msg::LaserScan::ranges()
{
    return m_ranges;
}
/*!
 * @brief This function copies the value in member intensities
 * @param _intensities New value to be copied in member intensities
 */
void sensor_msgs::msg::LaserScan::intensities(
        const std::vector<float>& _intensities)
{
    m_intensities = _intensities;
}

/*!
 * @brief This function moves the value in member intensities
 * @param _intensities New value to be moved in member intensities
 */
void sensor_msgs::msg::LaserScan::intensities(
        std::vector<float>&& _intensities)
{
    m_intensities = std::move(_intensities);
}

/*!
 * @brief This function returns a constant reference to member intensities
 * @return Constant reference to member intensities
 */
const std::vector<float>& sensor_msgs::msg::LaserScan::intensities() const
{
    return m_intensities;
}

/*!
 * @brief This function returns a reference to member intensities
 * @return Reference to member intensities
 */
std::vector<float>& sensor_msgs::msg::LaserScan::intensities()
{
    return m_intensities;
}


size_t sensor_msgs::msg::LaserScan::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return sensor_msgs_msg_LaserScan_max_key_cdr_typesize;
}

bool sensor_msgs::msg::LaserScan::isKeyDefined()
{
    return false;
}

void sensor_msgs::msg::LaserScan::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


