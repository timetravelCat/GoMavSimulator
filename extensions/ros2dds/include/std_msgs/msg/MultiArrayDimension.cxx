// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MultiArrayDimension.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "MultiArrayDimension.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define std_msgs_msg_MultiArrayDimension_max_cdr_typesize 268ULL;
#define std_msgs_msg_MultiArrayDimension_max_key_cdr_typesize 0ULL;

std_msgs::msg::MultiArrayDimension::MultiArrayDimension()
{
    // string m_label
    m_label ="";
    // unsigned long m_size
    m_size = 0;
    // unsigned long m_stride
    m_stride = 0;

}

std_msgs::msg::MultiArrayDimension::~MultiArrayDimension()
{



}

std_msgs::msg::MultiArrayDimension::MultiArrayDimension(
        const MultiArrayDimension& x)
{
    m_label = x.m_label;
    m_size = x.m_size;
    m_stride = x.m_stride;
}

std_msgs::msg::MultiArrayDimension::MultiArrayDimension(
        MultiArrayDimension&& x) noexcept 
{
    m_label = std::move(x.m_label);
    m_size = x.m_size;
    m_stride = x.m_stride;
}

std_msgs::msg::MultiArrayDimension& std_msgs::msg::MultiArrayDimension::operator =(
        const MultiArrayDimension& x)
{

    m_label = x.m_label;
    m_size = x.m_size;
    m_stride = x.m_stride;

    return *this;
}

std_msgs::msg::MultiArrayDimension& std_msgs::msg::MultiArrayDimension::operator =(
        MultiArrayDimension&& x) noexcept
{

    m_label = std::move(x.m_label);
    m_size = x.m_size;
    m_stride = x.m_stride;

    return *this;
}

bool std_msgs::msg::MultiArrayDimension::operator ==(
        const MultiArrayDimension& x) const
{

    return (m_label == x.m_label && m_size == x.m_size && m_stride == x.m_stride);
}

bool std_msgs::msg::MultiArrayDimension::operator !=(
        const MultiArrayDimension& x) const
{
    return !(*this == x);
}

size_t std_msgs::msg::MultiArrayDimension::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return std_msgs_msg_MultiArrayDimension_max_cdr_typesize;
}

size_t std_msgs::msg::MultiArrayDimension::getCdrSerializedSize(
        const std_msgs::msg::MultiArrayDimension& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.label().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void std_msgs::msg::MultiArrayDimension::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_label.c_str();
    scdr << m_size;
    scdr << m_stride;

}

void std_msgs::msg::MultiArrayDimension::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_label;
    dcdr >> m_size;
    dcdr >> m_stride;
}

/*!
 * @brief This function copies the value in member label
 * @param _label New value to be copied in member label
 */
void std_msgs::msg::MultiArrayDimension::label(
        const std::string& _label)
{
    m_label = _label;
}

/*!
 * @brief This function moves the value in member label
 * @param _label New value to be moved in member label
 */
void std_msgs::msg::MultiArrayDimension::label(
        std::string&& _label)
{
    m_label = std::move(_label);
}

/*!
 * @brief This function returns a constant reference to member label
 * @return Constant reference to member label
 */
const std::string& std_msgs::msg::MultiArrayDimension::label() const
{
    return m_label;
}

/*!
 * @brief This function returns a reference to member label
 * @return Reference to member label
 */
std::string& std_msgs::msg::MultiArrayDimension::label()
{
    return m_label;
}
/*!
 * @brief This function sets a value in member size
 * @param _size New value for member size
 */
void std_msgs::msg::MultiArrayDimension::size(
        uint32_t _size)
{
    m_size = _size;
}

/*!
 * @brief This function returns the value of member size
 * @return Value of member size
 */
uint32_t std_msgs::msg::MultiArrayDimension::size() const
{
    return m_size;
}

/*!
 * @brief This function returns a reference to member size
 * @return Reference to member size
 */
uint32_t& std_msgs::msg::MultiArrayDimension::size()
{
    return m_size;
}

/*!
 * @brief This function sets a value in member stride
 * @param _stride New value for member stride
 */
void std_msgs::msg::MultiArrayDimension::stride(
        uint32_t _stride)
{
    m_stride = _stride;
}

/*!
 * @brief This function returns the value of member stride
 * @return Value of member stride
 */
uint32_t std_msgs::msg::MultiArrayDimension::stride() const
{
    return m_stride;
}

/*!
 * @brief This function returns a reference to member stride
 * @return Reference to member stride
 */
uint32_t& std_msgs::msg::MultiArrayDimension::stride()
{
    return m_stride;
}



size_t std_msgs::msg::MultiArrayDimension::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return std_msgs_msg_MultiArrayDimension_max_key_cdr_typesize;
}

bool std_msgs::msg::MultiArrayDimension::isKeyDefined()
{
    return false;
}

void std_msgs::msg::MultiArrayDimension::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


