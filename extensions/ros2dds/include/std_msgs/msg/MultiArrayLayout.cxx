// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MultiArrayLayout.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "MultiArrayLayout.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define std_msgs_msg_MultiArrayLayout_max_cdr_typesize 26808ULL;
#define std_msgs_msg_MultiArrayDimension_max_cdr_typesize 268ULL;
#define std_msgs_msg_MultiArrayLayout_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_MultiArrayDimension_max_key_cdr_typesize 0ULL;

std_msgs::msg::MultiArrayLayout::MultiArrayLayout()
{
    // sequence<std_msgs::msg::MultiArrayDimension> m_dim

    // unsigned long m_data_offset
    m_data_offset = 0;

}

std_msgs::msg::MultiArrayLayout::~MultiArrayLayout()
{


}

std_msgs::msg::MultiArrayLayout::MultiArrayLayout(
        const MultiArrayLayout& x)
{
    m_dim = x.m_dim;
    m_data_offset = x.m_data_offset;
}

std_msgs::msg::MultiArrayLayout::MultiArrayLayout(
        MultiArrayLayout&& x) noexcept 
{
    m_dim = std::move(x.m_dim);
    m_data_offset = x.m_data_offset;
}

std_msgs::msg::MultiArrayLayout& std_msgs::msg::MultiArrayLayout::operator =(
        const MultiArrayLayout& x)
{

    m_dim = x.m_dim;
    m_data_offset = x.m_data_offset;

    return *this;
}

std_msgs::msg::MultiArrayLayout& std_msgs::msg::MultiArrayLayout::operator =(
        MultiArrayLayout&& x) noexcept
{

    m_dim = std::move(x.m_dim);
    m_data_offset = x.m_data_offset;

    return *this;
}

bool std_msgs::msg::MultiArrayLayout::operator ==(
        const MultiArrayLayout& x) const
{

    return (m_dim == x.m_dim && m_data_offset == x.m_data_offset);
}

bool std_msgs::msg::MultiArrayLayout::operator !=(
        const MultiArrayLayout& x) const
{
    return !(*this == x);
}

size_t std_msgs::msg::MultiArrayLayout::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return std_msgs_msg_MultiArrayLayout_max_cdr_typesize;
}

size_t std_msgs::msg::MultiArrayLayout::getCdrSerializedSize(
        const std_msgs::msg::MultiArrayLayout& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.dim().size(); ++a)
    {
        current_alignment += std_msgs::msg::MultiArrayDimension::getCdrSerializedSize(data.dim().at(a), current_alignment);}

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void std_msgs::msg::MultiArrayLayout::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_dim;
    scdr << m_data_offset;

}

void std_msgs::msg::MultiArrayLayout::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_dim;
    dcdr >> m_data_offset;
}

/*!
 * @brief This function copies the value in member dim
 * @param _dim New value to be copied in member dim
 */
void std_msgs::msg::MultiArrayLayout::dim(
        const std::vector<std_msgs::msg::MultiArrayDimension>& _dim)
{
    m_dim = _dim;
}

/*!
 * @brief This function moves the value in member dim
 * @param _dim New value to be moved in member dim
 */
void std_msgs::msg::MultiArrayLayout::dim(
        std::vector<std_msgs::msg::MultiArrayDimension>&& _dim)
{
    m_dim = std::move(_dim);
}

/*!
 * @brief This function returns a constant reference to member dim
 * @return Constant reference to member dim
 */
const std::vector<std_msgs::msg::MultiArrayDimension>& std_msgs::msg::MultiArrayLayout::dim() const
{
    return m_dim;
}

/*!
 * @brief This function returns a reference to member dim
 * @return Reference to member dim
 */
std::vector<std_msgs::msg::MultiArrayDimension>& std_msgs::msg::MultiArrayLayout::dim()
{
    return m_dim;
}
/*!
 * @brief This function sets a value in member data_offset
 * @param _data_offset New value for member data_offset
 */
void std_msgs::msg::MultiArrayLayout::data_offset(
        uint32_t _data_offset)
{
    m_data_offset = _data_offset;
}

/*!
 * @brief This function returns the value of member data_offset
 * @return Value of member data_offset
 */
uint32_t std_msgs::msg::MultiArrayLayout::data_offset() const
{
    return m_data_offset;
}

/*!
 * @brief This function returns a reference to member data_offset
 * @return Reference to member data_offset
 */
uint32_t& std_msgs::msg::MultiArrayLayout::data_offset()
{
    return m_data_offset;
}



size_t std_msgs::msg::MultiArrayLayout::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return std_msgs_msg_MultiArrayLayout_max_key_cdr_typesize;
}

bool std_msgs::msg::MultiArrayLayout::isKeyDefined()
{
    return false;
}

void std_msgs::msg::MultiArrayLayout::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


