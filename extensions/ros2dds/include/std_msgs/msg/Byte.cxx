// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Byte.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Byte.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define std_msgs_msg_Byte_max_cdr_typesize 1ULL;
#define std_msgs_msg_Byte_max_key_cdr_typesize 0ULL;

std_msgs::msg::Byte::Byte()
{
    // octet m_data
    m_data = 0;

}

std_msgs::msg::Byte::~Byte()
{
}

std_msgs::msg::Byte::Byte(
        const Byte& x)
{
    m_data = x.m_data;
}

std_msgs::msg::Byte::Byte(
        Byte&& x) noexcept 
{
    m_data = x.m_data;
}

std_msgs::msg::Byte& std_msgs::msg::Byte::operator =(
        const Byte& x)
{

    m_data = x.m_data;

    return *this;
}

std_msgs::msg::Byte& std_msgs::msg::Byte::operator =(
        Byte&& x) noexcept
{

    m_data = x.m_data;

    return *this;
}

bool std_msgs::msg::Byte::operator ==(
        const Byte& x) const
{

    return (m_data == x.m_data);
}

bool std_msgs::msg::Byte::operator !=(
        const Byte& x) const
{
    return !(*this == x);
}

size_t std_msgs::msg::Byte::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return std_msgs_msg_Byte_max_cdr_typesize;
}

size_t std_msgs::msg::Byte::getCdrSerializedSize(
        const std_msgs::msg::Byte& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void std_msgs::msg::Byte::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_data;

}

void std_msgs::msg::Byte::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_data;
}

/*!
 * @brief This function sets a value in member data
 * @param _data New value for member data
 */
void std_msgs::msg::Byte::data(
        uint8_t _data)
{
    m_data = _data;
}

/*!
 * @brief This function returns the value of member data
 * @return Value of member data
 */
uint8_t std_msgs::msg::Byte::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
uint8_t& std_msgs::msg::Byte::data()
{
    return m_data;
}



size_t std_msgs::msg::Byte::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return std_msgs_msg_Byte_max_key_cdr_typesize;
}

bool std_msgs::msg::Byte::isKeyDefined()
{
    return false;
}

void std_msgs::msg::Byte::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


