// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file UVCoordinate.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "UVCoordinate.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define visualization_msgs_msg_UVCoordinate_max_cdr_typesize 8ULL;
#define visualization_msgs_msg_UVCoordinate_max_key_cdr_typesize 0ULL;

visualization_msgs::msg::UVCoordinate::UVCoordinate()
{
    // float m_u
    m_u = 0.0;
    // float m_v
    m_v = 0.0;

}

visualization_msgs::msg::UVCoordinate::~UVCoordinate()
{


}

visualization_msgs::msg::UVCoordinate::UVCoordinate(
        const UVCoordinate& x)
{
    m_u = x.m_u;
    m_v = x.m_v;
}

visualization_msgs::msg::UVCoordinate::UVCoordinate(
        UVCoordinate&& x) noexcept 
{
    m_u = x.m_u;
    m_v = x.m_v;
}

visualization_msgs::msg::UVCoordinate& visualization_msgs::msg::UVCoordinate::operator =(
        const UVCoordinate& x)
{

    m_u = x.m_u;
    m_v = x.m_v;

    return *this;
}

visualization_msgs::msg::UVCoordinate& visualization_msgs::msg::UVCoordinate::operator =(
        UVCoordinate&& x) noexcept
{

    m_u = x.m_u;
    m_v = x.m_v;

    return *this;
}

bool visualization_msgs::msg::UVCoordinate::operator ==(
        const UVCoordinate& x) const
{

    return (m_u == x.m_u && m_v == x.m_v);
}

bool visualization_msgs::msg::UVCoordinate::operator !=(
        const UVCoordinate& x) const
{
    return !(*this == x);
}

size_t visualization_msgs::msg::UVCoordinate::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return visualization_msgs_msg_UVCoordinate_max_cdr_typesize;
}

size_t visualization_msgs::msg::UVCoordinate::getCdrSerializedSize(
        const visualization_msgs::msg::UVCoordinate& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void visualization_msgs::msg::UVCoordinate::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_u;
    scdr << m_v;

}

void visualization_msgs::msg::UVCoordinate::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_u;
    dcdr >> m_v;
}

/*!
 * @brief This function sets a value in member u
 * @param _u New value for member u
 */
void visualization_msgs::msg::UVCoordinate::u(
        float _u)
{
    m_u = _u;
}

/*!
 * @brief This function returns the value of member u
 * @return Value of member u
 */
float visualization_msgs::msg::UVCoordinate::u() const
{
    return m_u;
}

/*!
 * @brief This function returns a reference to member u
 * @return Reference to member u
 */
float& visualization_msgs::msg::UVCoordinate::u()
{
    return m_u;
}

/*!
 * @brief This function sets a value in member v
 * @param _v New value for member v
 */
void visualization_msgs::msg::UVCoordinate::v(
        float _v)
{
    m_v = _v;
}

/*!
 * @brief This function returns the value of member v
 * @return Value of member v
 */
float visualization_msgs::msg::UVCoordinate::v() const
{
    return m_v;
}

/*!
 * @brief This function returns a reference to member v
 * @return Reference to member v
 */
float& visualization_msgs::msg::UVCoordinate::v()
{
    return m_v;
}



size_t visualization_msgs::msg::UVCoordinate::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return visualization_msgs_msg_UVCoordinate_max_key_cdr_typesize;
}

bool visualization_msgs::msg::UVCoordinate::isKeyDefined()
{
    return false;
}

void visualization_msgs::msg::UVCoordinate::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


