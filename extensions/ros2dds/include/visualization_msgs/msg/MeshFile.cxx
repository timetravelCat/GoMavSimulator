// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MeshFile.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "MeshFile.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define visualization_msgs_msg_MeshFile_max_cdr_typesize 364ULL;
#define visualization_msgs_msg_MeshFile_max_key_cdr_typesize 0ULL;

visualization_msgs::msg::MeshFile::MeshFile()
{
    // string m_filename
    m_filename ="";
    // sequence<uint8> m_data


}

visualization_msgs::msg::MeshFile::~MeshFile()
{


}

visualization_msgs::msg::MeshFile::MeshFile(
        const MeshFile& x)
{
    m_filename = x.m_filename;
    m_data = x.m_data;
}

visualization_msgs::msg::MeshFile::MeshFile(
        MeshFile&& x) noexcept 
{
    m_filename = std::move(x.m_filename);
    m_data = std::move(x.m_data);
}

visualization_msgs::msg::MeshFile& visualization_msgs::msg::MeshFile::operator =(
        const MeshFile& x)
{

    m_filename = x.m_filename;
    m_data = x.m_data;

    return *this;
}

visualization_msgs::msg::MeshFile& visualization_msgs::msg::MeshFile::operator =(
        MeshFile&& x) noexcept
{

    m_filename = std::move(x.m_filename);
    m_data = std::move(x.m_data);

    return *this;
}

bool visualization_msgs::msg::MeshFile::operator ==(
        const MeshFile& x) const
{

    return (m_filename == x.m_filename && m_data == x.m_data);
}

bool visualization_msgs::msg::MeshFile::operator !=(
        const MeshFile& x) const
{
    return !(*this == x);
}

size_t visualization_msgs::msg::MeshFile::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return visualization_msgs_msg_MeshFile_max_cdr_typesize;
}

size_t visualization_msgs::msg::MeshFile::getCdrSerializedSize(
        const visualization_msgs::msg::MeshFile& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.filename().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.data().size() > 0)
    {
        current_alignment += (data.data().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }




    return current_alignment - initial_alignment;
}

void visualization_msgs::msg::MeshFile::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_filename.c_str();
    scdr << m_data;

}

void visualization_msgs::msg::MeshFile::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_filename;
    dcdr >> m_data;
}

/*!
 * @brief This function copies the value in member filename
 * @param _filename New value to be copied in member filename
 */
void visualization_msgs::msg::MeshFile::filename(
        const std::string& _filename)
{
    m_filename = _filename;
}

/*!
 * @brief This function moves the value in member filename
 * @param _filename New value to be moved in member filename
 */
void visualization_msgs::msg::MeshFile::filename(
        std::string&& _filename)
{
    m_filename = std::move(_filename);
}

/*!
 * @brief This function returns a constant reference to member filename
 * @return Constant reference to member filename
 */
const std::string& visualization_msgs::msg::MeshFile::filename() const
{
    return m_filename;
}

/*!
 * @brief This function returns a reference to member filename
 * @return Reference to member filename
 */
std::string& visualization_msgs::msg::MeshFile::filename()
{
    return m_filename;
}
/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void visualization_msgs::msg::MeshFile::data(
        const std::vector<uint8_t>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void visualization_msgs::msg::MeshFile::data(
        std::vector<uint8_t>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::vector<uint8_t>& visualization_msgs::msg::MeshFile::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::vector<uint8_t>& visualization_msgs::msg::MeshFile::data()
{
    return m_data;
}


size_t visualization_msgs::msg::MeshFile::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return visualization_msgs_msg_MeshFile_max_key_cdr_typesize;
}

bool visualization_msgs::msg::MeshFile::isKeyDefined()
{
    return false;
}

void visualization_msgs::msg::MeshFile::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


