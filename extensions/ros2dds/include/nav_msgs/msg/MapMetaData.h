// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MapMetaData.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_NAV_MSGS_MSG_MAPMETADATA_H_
#define _FAST_DDS_GENERATED_NAV_MSGS_MSG_MAPMETADATA_H_

#include "builtin_interfaces/msg/Time.h"
#include "geometry_msgs/msg/Pose.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MapMetaData_SOURCE)
#define MapMetaData_DllAPI __declspec( dllexport )
#else
#define MapMetaData_DllAPI __declspec( dllimport )
#endif // MapMetaData_SOURCE
#else
#define MapMetaData_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define MapMetaData_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


namespace nav_msgs {
    namespace msg {
        /*!
         * @brief This class represents the structure MapMetaData defined by the user in the IDL file.
         * @ingroup MAPMETADATA
         */
        class MapMetaData
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport MapMetaData();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~MapMetaData();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object nav_msgs::msg::MapMetaData that will be copied.
             */
            eProsima_user_DllExport MapMetaData(
                    const MapMetaData& x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object nav_msgs::msg::MapMetaData that will be copied.
             */
            eProsima_user_DllExport MapMetaData(
                    MapMetaData&& x) noexcept;

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object nav_msgs::msg::MapMetaData that will be copied.
             */
            eProsima_user_DllExport MapMetaData& operator =(
                    const MapMetaData& x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object nav_msgs::msg::MapMetaData that will be copied.
             */
            eProsima_user_DllExport MapMetaData& operator =(
                    MapMetaData&& x) noexcept;

            /*!
             * @brief Comparison operator.
             * @param x nav_msgs::msg::MapMetaData object to compare.
             */
            eProsima_user_DllExport bool operator ==(
                    const MapMetaData& x) const;

            /*!
             * @brief Comparison operator.
             * @param x nav_msgs::msg::MapMetaData object to compare.
             */
            eProsima_user_DllExport bool operator !=(
                    const MapMetaData& x) const;

            /*!
             * @brief This function copies the value in member map_load_time
             * @param _map_load_time New value to be copied in member map_load_time
             */
            eProsima_user_DllExport void map_load_time(
                    const builtin_interfaces::msg::Time& _map_load_time);

            /*!
             * @brief This function moves the value in member map_load_time
             * @param _map_load_time New value to be moved in member map_load_time
             */
            eProsima_user_DllExport void map_load_time(
                    builtin_interfaces::msg::Time&& _map_load_time);

            /*!
             * @brief This function returns a constant reference to member map_load_time
             * @return Constant reference to member map_load_time
             */
            eProsima_user_DllExport const builtin_interfaces::msg::Time& map_load_time() const;

            /*!
             * @brief This function returns a reference to member map_load_time
             * @return Reference to member map_load_time
             */
            eProsima_user_DllExport builtin_interfaces::msg::Time& map_load_time();
            /*!
             * @brief This function sets a value in member resolution
             * @param _resolution New value for member resolution
             */
            eProsima_user_DllExport void resolution(
                    float _resolution);

            /*!
             * @brief This function returns the value of member resolution
             * @return Value of member resolution
             */
            eProsima_user_DllExport float resolution() const;

            /*!
             * @brief This function returns a reference to member resolution
             * @return Reference to member resolution
             */
            eProsima_user_DllExport float& resolution();

            /*!
             * @brief This function sets a value in member width
             * @param _width New value for member width
             */
            eProsima_user_DllExport void width(
                    uint32_t _width);

            /*!
             * @brief This function returns the value of member width
             * @return Value of member width
             */
            eProsima_user_DllExport uint32_t width() const;

            /*!
             * @brief This function returns a reference to member width
             * @return Reference to member width
             */
            eProsima_user_DllExport uint32_t& width();

            /*!
             * @brief This function sets a value in member height
             * @param _height New value for member height
             */
            eProsima_user_DllExport void height(
                    uint32_t _height);

            /*!
             * @brief This function returns the value of member height
             * @return Value of member height
             */
            eProsima_user_DllExport uint32_t height() const;

            /*!
             * @brief This function returns a reference to member height
             * @return Reference to member height
             */
            eProsima_user_DllExport uint32_t& height();

            /*!
             * @brief This function copies the value in member origin
             * @param _origin New value to be copied in member origin
             */
            eProsima_user_DllExport void origin(
                    const geometry_msgs::msg::Pose& _origin);

            /*!
             * @brief This function moves the value in member origin
             * @param _origin New value to be moved in member origin
             */
            eProsima_user_DllExport void origin(
                    geometry_msgs::msg::Pose&& _origin);

            /*!
             * @brief This function returns a constant reference to member origin
             * @return Constant reference to member origin
             */
            eProsima_user_DllExport const geometry_msgs::msg::Pose& origin() const;

            /*!
             * @brief This function returns a reference to member origin
             * @return Reference to member origin
             */
            eProsima_user_DllExport geometry_msgs::msg::Pose& origin();

            /*!
            * @brief This function returns the maximum serialized size of an object
            * depending on the buffer alignment.
            * @param current_alignment Buffer alignment.
            * @return Maximum serialized size.
            */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(
                    const nav_msgs::msg::MapMetaData& data,
                    size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(
                    eprosima::fastcdr::Cdr& cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(
                    eprosima::fastcdr::Cdr& cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                    size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(
                    eprosima::fastcdr::Cdr& cdr) const;

        private:

            builtin_interfaces::msg::Time m_map_load_time;
            float m_resolution;
            uint32_t m_width;
            uint32_t m_height;
            geometry_msgs::msg::Pose m_origin;

        };
    } // namespace msg
} // namespace nav_msgs

#endif // _FAST_DDS_GENERATED_NAV_MSGS_MSG_MAPMETADATA_H_