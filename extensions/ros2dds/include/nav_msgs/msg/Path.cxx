// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Path.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Path.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define builtin_interfaces_msg_Time_max_cdr_typesize 8ULL;
#define geometry_msgs_msg_Pose_max_cdr_typesize 56ULL;
#define geometry_msgs_msg_PoseStamped_max_cdr_typesize 328ULL;
#define nav_msgs_msg_Path_max_cdr_typesize 33072ULL;
#define geometry_msgs_msg_Point_max_cdr_typesize 24ULL;
#define geometry_msgs_msg_Quaternion_max_cdr_typesize 32ULL;
#define std_msgs_msg_Header_max_cdr_typesize 268ULL;
#define builtin_interfaces_msg_Time_max_key_cdr_typesize 0ULL;
#define geometry_msgs_msg_Pose_max_key_cdr_typesize 0ULL;
#define geometry_msgs_msg_PoseStamped_max_key_cdr_typesize 0ULL;
#define nav_msgs_msg_Path_max_key_cdr_typesize 0ULL;
#define geometry_msgs_msg_Point_max_key_cdr_typesize 0ULL;
#define geometry_msgs_msg_Quaternion_max_key_cdr_typesize 0ULL;
#define std_msgs_msg_Header_max_key_cdr_typesize 0ULL;

nav_msgs::msg::Path::Path()
{
    // std_msgs::msg::Header m_header

    // sequence<geometry_msgs::msg::PoseStamped> m_poses


}

nav_msgs::msg::Path::~Path()
{


}

nav_msgs::msg::Path::Path(
        const Path& x)
{
    m_header = x.m_header;
    m_poses = x.m_poses;
}

nav_msgs::msg::Path::Path(
        Path&& x) noexcept 
{
    m_header = std::move(x.m_header);
    m_poses = std::move(x.m_poses);
}

nav_msgs::msg::Path& nav_msgs::msg::Path::operator =(
        const Path& x)
{

    m_header = x.m_header;
    m_poses = x.m_poses;

    return *this;
}

nav_msgs::msg::Path& nav_msgs::msg::Path::operator =(
        Path&& x) noexcept
{

    m_header = std::move(x.m_header);
    m_poses = std::move(x.m_poses);

    return *this;
}

bool nav_msgs::msg::Path::operator ==(
        const Path& x) const
{

    return (m_header == x.m_header && m_poses == x.m_poses);
}

bool nav_msgs::msg::Path::operator !=(
        const Path& x) const
{
    return !(*this == x);
}

size_t nav_msgs::msg::Path::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return nav_msgs_msg_Path_max_cdr_typesize;
}

size_t nav_msgs::msg::Path::getCdrSerializedSize(
        const nav_msgs::msg::Path& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += std_msgs::msg::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.poses().size(); ++a)
    {
        current_alignment += geometry_msgs::msg::PoseStamped::getCdrSerializedSize(data.poses().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void nav_msgs::msg::Path::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_header;
    scdr << m_poses;

}

void nav_msgs::msg::Path::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_header;
    dcdr >> m_poses;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void nav_msgs::msg::Path::header(
        const std_msgs::msg::Header& _header)
{
    m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void nav_msgs::msg::Path::header(
        std_msgs::msg::Header&& _header)
{
    m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const std_msgs::msg::Header& nav_msgs::msg::Path::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
std_msgs::msg::Header& nav_msgs::msg::Path::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member poses
 * @param _poses New value to be copied in member poses
 */
void nav_msgs::msg::Path::poses(
        const std::vector<geometry_msgs::msg::PoseStamped>& _poses)
{
    m_poses = _poses;
}

/*!
 * @brief This function moves the value in member poses
 * @param _poses New value to be moved in member poses
 */
void nav_msgs::msg::Path::poses(
        std::vector<geometry_msgs::msg::PoseStamped>&& _poses)
{
    m_poses = std::move(_poses);
}

/*!
 * @brief This function returns a constant reference to member poses
 * @return Constant reference to member poses
 */
const std::vector<geometry_msgs::msg::PoseStamped>& nav_msgs::msg::Path::poses() const
{
    return m_poses;
}

/*!
 * @brief This function returns a reference to member poses
 * @return Reference to member poses
 */
std::vector<geometry_msgs::msg::PoseStamped>& nav_msgs::msg::Path::poses()
{
    return m_poses;
}


size_t nav_msgs::msg::Path::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return nav_msgs_msg_Path_max_key_cdr_typesize;
}

bool nav_msgs::msg::Path::isKeyDefined()
{
    return false;
}

void nav_msgs::msg::Path::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


