// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MapMetaData.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "MapMetaData.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define builtin_interfaces_msg_Time_max_cdr_typesize 8ULL;
#define geometry_msgs_msg_Pose_max_cdr_typesize 56ULL;
#define geometry_msgs_msg_Point_max_cdr_typesize 24ULL;
#define geometry_msgs_msg_Quaternion_max_cdr_typesize 32ULL;
#define nav_msgs_msg_MapMetaData_max_cdr_typesize 80ULL;
#define builtin_interfaces_msg_Time_max_key_cdr_typesize 0ULL;
#define geometry_msgs_msg_Pose_max_key_cdr_typesize 0ULL;
#define geometry_msgs_msg_Point_max_key_cdr_typesize 0ULL;
#define geometry_msgs_msg_Quaternion_max_key_cdr_typesize 0ULL;
#define nav_msgs_msg_MapMetaData_max_key_cdr_typesize 0ULL;

nav_msgs::msg::MapMetaData::MapMetaData()
{
    // builtin_interfaces::msg::Time m_map_load_time

    // float m_resolution
    m_resolution = 0.0;
    // unsigned long m_width
    m_width = 0;
    // unsigned long m_height
    m_height = 0;
    // geometry_msgs::msg::Pose m_origin


}

nav_msgs::msg::MapMetaData::~MapMetaData()
{





}

nav_msgs::msg::MapMetaData::MapMetaData(
        const MapMetaData& x)
{
    m_map_load_time = x.m_map_load_time;
    m_resolution = x.m_resolution;
    m_width = x.m_width;
    m_height = x.m_height;
    m_origin = x.m_origin;
}

nav_msgs::msg::MapMetaData::MapMetaData(
        MapMetaData&& x) noexcept 
{
    m_map_load_time = std::move(x.m_map_load_time);
    m_resolution = x.m_resolution;
    m_width = x.m_width;
    m_height = x.m_height;
    m_origin = std::move(x.m_origin);
}

nav_msgs::msg::MapMetaData& nav_msgs::msg::MapMetaData::operator =(
        const MapMetaData& x)
{

    m_map_load_time = x.m_map_load_time;
    m_resolution = x.m_resolution;
    m_width = x.m_width;
    m_height = x.m_height;
    m_origin = x.m_origin;

    return *this;
}

nav_msgs::msg::MapMetaData& nav_msgs::msg::MapMetaData::operator =(
        MapMetaData&& x) noexcept
{

    m_map_load_time = std::move(x.m_map_load_time);
    m_resolution = x.m_resolution;
    m_width = x.m_width;
    m_height = x.m_height;
    m_origin = std::move(x.m_origin);

    return *this;
}

bool nav_msgs::msg::MapMetaData::operator ==(
        const MapMetaData& x) const
{

    return (m_map_load_time == x.m_map_load_time && m_resolution == x.m_resolution && m_width == x.m_width && m_height == x.m_height && m_origin == x.m_origin);
}

bool nav_msgs::msg::MapMetaData::operator !=(
        const MapMetaData& x) const
{
    return !(*this == x);
}

size_t nav_msgs::msg::MapMetaData::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return nav_msgs_msg_MapMetaData_max_cdr_typesize;
}

size_t nav_msgs::msg::MapMetaData::getCdrSerializedSize(
        const nav_msgs::msg::MapMetaData& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += builtin_interfaces::msg::Time::getCdrSerializedSize(data.map_load_time(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += geometry_msgs::msg::Pose::getCdrSerializedSize(data.origin(), current_alignment);

    return current_alignment - initial_alignment;
}

void nav_msgs::msg::MapMetaData::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_map_load_time;
    scdr << m_resolution;
    scdr << m_width;
    scdr << m_height;
    scdr << m_origin;

}

void nav_msgs::msg::MapMetaData::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_map_load_time;
    dcdr >> m_resolution;
    dcdr >> m_width;
    dcdr >> m_height;
    dcdr >> m_origin;
}

/*!
 * @brief This function copies the value in member map_load_time
 * @param _map_load_time New value to be copied in member map_load_time
 */
void nav_msgs::msg::MapMetaData::map_load_time(
        const builtin_interfaces::msg::Time& _map_load_time)
{
    m_map_load_time = _map_load_time;
}

/*!
 * @brief This function moves the value in member map_load_time
 * @param _map_load_time New value to be moved in member map_load_time
 */
void nav_msgs::msg::MapMetaData::map_load_time(
        builtin_interfaces::msg::Time&& _map_load_time)
{
    m_map_load_time = std::move(_map_load_time);
}

/*!
 * @brief This function returns a constant reference to member map_load_time
 * @return Constant reference to member map_load_time
 */
const builtin_interfaces::msg::Time& nav_msgs::msg::MapMetaData::map_load_time() const
{
    return m_map_load_time;
}

/*!
 * @brief This function returns a reference to member map_load_time
 * @return Reference to member map_load_time
 */
builtin_interfaces::msg::Time& nav_msgs::msg::MapMetaData::map_load_time()
{
    return m_map_load_time;
}
/*!
 * @brief This function sets a value in member resolution
 * @param _resolution New value for member resolution
 */
void nav_msgs::msg::MapMetaData::resolution(
        float _resolution)
{
    m_resolution = _resolution;
}

/*!
 * @brief This function returns the value of member resolution
 * @return Value of member resolution
 */
float nav_msgs::msg::MapMetaData::resolution() const
{
    return m_resolution;
}

/*!
 * @brief This function returns a reference to member resolution
 * @return Reference to member resolution
 */
float& nav_msgs::msg::MapMetaData::resolution()
{
    return m_resolution;
}

/*!
 * @brief This function sets a value in member width
 * @param _width New value for member width
 */
void nav_msgs::msg::MapMetaData::width(
        uint32_t _width)
{
    m_width = _width;
}

/*!
 * @brief This function returns the value of member width
 * @return Value of member width
 */
uint32_t nav_msgs::msg::MapMetaData::width() const
{
    return m_width;
}

/*!
 * @brief This function returns a reference to member width
 * @return Reference to member width
 */
uint32_t& nav_msgs::msg::MapMetaData::width()
{
    return m_width;
}

/*!
 * @brief This function sets a value in member height
 * @param _height New value for member height
 */
void nav_msgs::msg::MapMetaData::height(
        uint32_t _height)
{
    m_height = _height;
}

/*!
 * @brief This function returns the value of member height
 * @return Value of member height
 */
uint32_t nav_msgs::msg::MapMetaData::height() const
{
    return m_height;
}

/*!
 * @brief This function returns a reference to member height
 * @return Reference to member height
 */
uint32_t& nav_msgs::msg::MapMetaData::height()
{
    return m_height;
}

/*!
 * @brief This function copies the value in member origin
 * @param _origin New value to be copied in member origin
 */
void nav_msgs::msg::MapMetaData::origin(
        const geometry_msgs::msg::Pose& _origin)
{
    m_origin = _origin;
}

/*!
 * @brief This function moves the value in member origin
 * @param _origin New value to be moved in member origin
 */
void nav_msgs::msg::MapMetaData::origin(
        geometry_msgs::msg::Pose&& _origin)
{
    m_origin = std::move(_origin);
}

/*!
 * @brief This function returns a constant reference to member origin
 * @return Constant reference to member origin
 */
const geometry_msgs::msg::Pose& nav_msgs::msg::MapMetaData::origin() const
{
    return m_origin;
}

/*!
 * @brief This function returns a reference to member origin
 * @return Reference to member origin
 */
geometry_msgs::msg::Pose& nav_msgs::msg::MapMetaData::origin()
{
    return m_origin;
}


size_t nav_msgs::msg::MapMetaData::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return nav_msgs_msg_MapMetaData_max_key_cdr_typesize;
}

bool nav_msgs::msg::MapMetaData::isKeyDefined()
{
    return false;
}

void nav_msgs::msg::MapMetaData::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


